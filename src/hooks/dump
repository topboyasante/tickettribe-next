
function useFetchDiscoveredEvents(key: string) {
  const { isLoading: IsFetchingDiscoveredEvents, data: DiscoveredEvents } =
    useQuery({
      queryKey: [key],
      queryFn: async () => {
        const res = await axios.get(
          `https://ticket-tribe.onrender.com/api/v1/events/`
        );
        return res.data;
      },
      select: (data) => {
        return data.events.slice(0, 4);
      },
    });
  return {
    DiscoveredEvents,
    IsFetchingDiscoveredEvents,
  };
}

function useFetchEvents(key: string) {
  const { isLoading: IsFetchingEvents, data: Events } = useQuery({
    queryKey: [key],
    queryFn: async () => {
      const res = await axios.get(
        `https://ticket-tribe.onrender.com/api/v1/events/`
      );
      return res.data;
    },
    select: (data) => {
      return data.events;
    },
  });
  return {
    IsFetchingEvents,
    Events,
  };
}

function useFetchSingleEvent(key: string, eventID: string) {
  const { isLoading: isFetchingSingleEvent, data: SingleEvent } = useQuery({
    queryKey: [key],
    queryFn: async () => {
      const res = await axios.get(
        `https://ticket-tribe.onrender.com/api/v1/events/${eventID}`
      );
      return res.data;
    },
    select: (data) => {
      return data.event;
    },
  });

  return {
    isFetchingSingleEvent,
    SingleEvent,
  };
}

function useFetchMyEvents(key: string) {
  const { isLoading: IsFetchingMyEvents, data: MyEvents } = useQuery({
    queryKey: [key],
    queryFn: async () => {
      const res = await axios.get(
        `https://ticket-tribe.onrender.com/api/v1/events/my-events`,
        { headers: { Authorization: `Bearer ${accessToken}` } }
      );
      return res.data;
    },
    select: (data) => {
      return data.event;
    },
  });
  return {
    IsFetchingMyEvents,
    MyEvents,
  };
}

function useFetchAllTickets(key: string) {
  const { isLoading: isFetchingAllTickets, data: AllTickets } = useQuery({
    queryKey: [key],
    queryFn: async () => {
      const res = await axios.get(
        `https://ticket-tribe.onrender.com/api/v1/tickets`,
        { headers: { Authorization: `Bearer ${accessToken}` } }
      );
      return res.data;
    },
    select: (data) => {
      return data.tickets;
    },
  });

  return {
    isFetchingAllTickets,
    AllTickets,
  };
}

function useFetchAllMyTickets(key: string) {
  const { isLoading: isFetchingAllMyTickets, data: AllMyTickets } = useQuery({
    queryKey: [key],
    queryFn: async () => {
      const res = await axios.get(
        `https://ticket-tribe.onrender.com/api/v1/tickets/my-tickets`,
        { headers: { Authorization: `Bearer ${accessToken}` } }
      );
      return res.data;
    },
    select: (data) => {
      return data.tickets;
    },
  });

  return {
    isFetchingAllMyTickets,
    AllMyTickets,
  };
}

function useFetchAllTicketsForSpecificEvent(key: string, id: string) {
  const { isLoading: isFetchingAllTicketsForEvent, data: AllTicketsForEvent } =
    useQuery({
      queryKey: [key],
      queryFn: async () => {
        const res = await axios.get(
          `https://ticket-tribe.onrender.com/api/v1/tickets/my-tickets`,
          { headers: { Authorization: `Bearer ${accessToken}` } }
        );
        return res.data;
      },
      select: (data) => {
        const ticketsForEvent = data.tickets.filter(
          (i: ITicket) => i.eventId === id
        );
        return ticketsForEvent;
      },
    });

  return {
    isFetchingAllTicketsForEvent,
    AllTicketsForEvent,
  };
}

export {
  useFetchEvents,
  useFetchMyEvents,
  useFetchDiscoveredEvents,
  useFetchSingleEvent,
  useFetchAllMyTickets,
  useFetchAllTicketsForSpecificEvent,
};




import axios from "axios";
import { useQuery } from "@tanstack/react-query";
import { useSession } from "next-auth/react";

export function useFetch(key: string, eventID?: string) {
  const session = useSession();
  const accessToken = session.data?.user.token;

  const { isLoading: IsFetchingDiscoveredEvents, data: DiscoveredEvents } =
    useQuery({
      queryKey: [key],
      queryFn: async () => {
        const res = await axios.get(
          `https://ticket-tribe.onrender.com/api/v1/events/`
        );
        return res.data;
      },
      select: (data) => {
        return data.events.slice(0, 4);
      },
    });

  const { isLoading: IsFetchingEvents, data: Events } = useQuery({
    queryKey: [key],
    queryFn: async () => {
      const res = await axios.get(
        `https://ticket-tribe.onrender.com/api/v1/events/`
      );
      return res.data;
    },
    select: (data) => {
      return data.events;
    },
  });

  const { isLoading: isFetchingSingleEvent, data: SingleEvent } = useQuery({
    queryKey: [key],
    queryFn: async () => {
      const res = await axios.get(
        `https://ticket-tribe.onrender.com/api/v1/events/${eventID}`
      );
      return res.data;
    },
    select: (data) => {
      return data.event;
    },
  });

  return {
    DiscoveredEvents,
    IsFetchingDiscoveredEvents,
    Events,
    IsFetchingEvents,
    isFetchingSingleEvent,
    SingleEvent,
  };
}
